// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    first_name,
    last_name,
    email_address,
    password,
    user_active,
    created_at,
    updated_at 
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, first_name, last_name, email_address, password, user_active, created_at, updated_at
`

type CreateUserParams struct {
	ID           uuid.UUID
	FirstName    sql.NullString
	LastName     sql.NullString
	EmailAddress string
	Password     string
	UserActive   sql.NullInt32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.Password,
		arg.UserActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email_address, password, user_active, created_at, updated_at FROM users u WHERE u.email_address = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, emailAddress string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, emailAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
